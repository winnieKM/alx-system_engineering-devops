# 1-distributed_web_infrastructure

📌 Infrastructure Overview:
This is a more reliable and scalable setup than Task 0. It uses 3 servers: one for load balancing and two to handle website requests.

🧭 How it Works:

1. A user types www.foobar.com in their browser.
2. DNS resolves the domain to the IP of the **load balancer**.
3. The load balancer sends the request to one of two application servers.
4. Each app server runs Nginx and hosts the same codebase.
5. The app server queries the MySQL database and returns a response.
6. The user receives the webpage in their browser.

🖼 Diagram (ASCII):

        [ User ]
           |
           v

+-----------------+
| Load Balancer | --> Round Robin
| (HAProxy) |
+--------+--------+
|
+-----+-----+
| |
v v
+------------+ +------------+
| App Server | | App Server |
| #1 | | #2 |
| (Nginx + | | (Nginx + |
| Code) | | Code) |
+-----+------+ +-----+------+
| |
+------+-------+
|
v
+----------------+
| MySQL Database |
+----------------+

🧠 Component Explanations:

🔀 Load Balancer (HAProxy)

- Distributes traffic between App Server #1 and App Server #2.
- Helps prevent overload on a single server.
- **Algorithm used: Round Robin** – requests are sent to each app server in turn, one after the other.

⚙️ Active-Active vs Active-Passive:

- **Active-Active**: Both app servers are working at the same time and share traffic (this is our setup).
- **Active-Passive**: Only one app server is active. The other is on standby and only takes over if the first one fails.

🗃️ MySQL Database - Primary-Replica (Master-Slave) Setup:

- **Primary Node**: Handles all write operations (insert, update, delete).
- **Replica Node**: Handles read operations only (select).
- This setup reduces load on the primary and makes reading faster.

⚠️ Issues with This Infrastructure:

🔸 Single Point of Failure (SPOF):

- If the **load balancer** fails, no traffic reaches the app servers.
- If the **MySQL database** fails, the app cannot store or retrieve data.

🔸 Security Issues:

- There are no firewalls or encryption (HTTPS), so the system is vulnerable to attacks.

🔸 No Monitoring:

- There’s no system to detect high load, errors, or server downtime.
- It’s hard to know if something breaks until users complain.
